## Time Complexity

USACO requires contestants to submit programs that run within a certain amount of time(2 seconds fo C and C++ and 4 seconds for Java and Python). Therefore, it is very important to know relatively how long a program will take to run and if it can be simplified. One way to do this is by noting a program's **Time Complexity**, or the number of operations it takes to run an algorithm. To measure this, **Big-O** notation is used, which takes in a program and outputs a worst-case scenario for complexity.


* O(1) is defined to be the complexity of an operation that are basic input-output steps that don't iterate
* O(n) is the complexity of a loop with *n* iterations
* Nested loops with *m* outer loop iteratons and *n* inner loop iterations: O(*mn*)
* Independent non-nested operations with complexities O(*a*) and O(*b*): O(*a+b*)
* Mathematical formulas outputting a calculated answer: O(1)
* Default Sorting: O(*n log n*)
* Iterating though all subsets: O(*2^n*)
* Iterating through all permutations: O(*n!*)

Note that Big-O is only an estimate and many USACO Bronze problems have n < 100, leaving much room for error.
More information can be found at [USACO Guide - Time Complexity](https://usaco.guide/bronze/time-comp?lang=py) 
